# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import AutoPartDetect_pb2 as AutoPartDetect__pb2


class AutoPartDetectionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Get_List_of_Tags = channel.unary_unary(
                '/AutoPartDetection/Get_List_of_Tags',
                request_serializer=AutoPartDetect__pb2.Get_List_of_Tags_Request.SerializeToString,
                response_deserializer=AutoPartDetect__pb2.Get_List_of_Tags_Response.FromString,
                )
        self.Get_Tag_Data = channel.unary_unary(
                '/AutoPartDetection/Get_Tag_Data',
                request_serializer=AutoPartDetect__pb2.Get_Tag_Data_Request.SerializeToString,
                response_deserializer=AutoPartDetect__pb2.Get_Tag_Data_Response.FromString,
                )
        self.Get_Specific_Tag_Data = channel.unary_unary(
                '/AutoPartDetection/Get_Specific_Tag_Data',
                request_serializer=AutoPartDetect__pb2.Get_Specific_Tag_Data_Request.SerializeToString,
                response_deserializer=AutoPartDetect__pb2.Get_Specific_Tag_Data_Response.FromString,
                )


class AutoPartDetectionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Get_List_of_Tags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get_Tag_Data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get_Specific_Tag_Data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AutoPartDetectionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Get_List_of_Tags': grpc.unary_unary_rpc_method_handler(
                    servicer.Get_List_of_Tags,
                    request_deserializer=AutoPartDetect__pb2.Get_List_of_Tags_Request.FromString,
                    response_serializer=AutoPartDetect__pb2.Get_List_of_Tags_Response.SerializeToString,
            ),
            'Get_Tag_Data': grpc.unary_unary_rpc_method_handler(
                    servicer.Get_Tag_Data,
                    request_deserializer=AutoPartDetect__pb2.Get_Tag_Data_Request.FromString,
                    response_serializer=AutoPartDetect__pb2.Get_Tag_Data_Response.SerializeToString,
            ),
            'Get_Specific_Tag_Data': grpc.unary_unary_rpc_method_handler(
                    servicer.Get_Specific_Tag_Data,
                    request_deserializer=AutoPartDetect__pb2.Get_Specific_Tag_Data_Request.FromString,
                    response_serializer=AutoPartDetect__pb2.Get_Specific_Tag_Data_Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AutoPartDetection', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AutoPartDetection(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Get_List_of_Tags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AutoPartDetection/Get_List_of_Tags',
            AutoPartDetect__pb2.Get_List_of_Tags_Request.SerializeToString,
            AutoPartDetect__pb2.Get_List_of_Tags_Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get_Tag_Data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AutoPartDetection/Get_Tag_Data',
            AutoPartDetect__pb2.Get_Tag_Data_Request.SerializeToString,
            AutoPartDetect__pb2.Get_Tag_Data_Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get_Specific_Tag_Data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AutoPartDetection/Get_Specific_Tag_Data',
            AutoPartDetect__pb2.Get_Specific_Tag_Data_Request.SerializeToString,
            AutoPartDetect__pb2.Get_Specific_Tag_Data_Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
